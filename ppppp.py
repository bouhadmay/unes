{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Les 5 premières lignes du dataframe :\n",
      "              Name    Phone Number                            Email  \\\n",
      "0       Aaron Cote        966-7625                 elit@hotmail.org   \n",
      "1  Angelica Lawson        232-3051            diam.proin@google.org   \n",
      "2    Louis Gilbert  1-997-733-0134      lorem.fringilla@hotmail.org   \n",
      "3     Basia Finley  1-987-322-7148      tristique.aliquet@icloud.co   \n",
      "4      Rhona Sears        387-7682  iaculis.odio.nam@protonmail.org   \n",
      "\n",
      "                  Address       Country Postal code Last date of connection  \\\n",
      "0   699-5837 Risus Street        Norway        4126                5-Apr-21   \n",
      "1  481-8428 Magna. Street      Pakistan      518885           oct. 10, 2021   \n",
      "2  Ap #192-2082 Enim. Ave      Colombia      575444                2-Jul-22   \n",
      "3        608-2732 Nec Rd.  South Africa   5973-5765               19-Feb-22   \n",
      "4             8763 In Rd.        France       37476               31-Mar-22   \n",
      "\n",
      "  Last time of connection  Age Gender  Customer spendings  \n",
      "0                    4:39   71    Man                 356  \n",
      "1                    0:36   37  Women                 173  \n",
      "2                    3:37   24  Women                 105  \n",
      "3                    2:34   37  Women                  28  \n",
      "4                    6:28   42  Women                  13  \n",
      "Résumé technique du dataframe :\n",
      "Nombre de lignes :  505\n",
      "Colonnes du dataframe :  ['Name', 'Phone Number', 'Email', 'Address', 'Country', 'Postal code', 'Last date of connection', 'Last time of connection', 'Age', 'Gender', 'Customer spendings']\n",
      "Types de données des champs :\n",
      "Name                       object\n",
      "Phone Number               object\n",
      "Email                      object\n",
      "Address                    object\n",
      "Country                    object\n",
      "Postal code                object\n",
      "Last date of connection    object\n",
      "Last time of connection    object\n",
      "Age                         int64\n",
      "Gender                     object\n",
      "Customer spendings          int64\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "df = pd.read_csv('C:\\\\Users\\\\Desktop\\\\Downloads\\\\New folder\\\\dataset-sell4all.csv')\n",
    "\n",
    "print(\"Les 5 premières lignes du dataframe :\")\n",
    "print(df.head())\n",
    "\n",
    "print(\"Résumé technique du dataframe :\")\n",
    "print(\"Nombre de lignes : \", len(df))\n",
    "print(\"Colonnes du dataframe : \", df.columns.tolist())\n",
    "print(\"Types de données des champs :\")\n",
    "print(df.dtypes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Médiane de l'âge :  46.0\n",
      "Moyenne de l'âge :  46.08316831683168\n",
      "Médiane des dépenses des clients :  307.0\n",
      "Moyenne des dépenses des clients :  311.16831683168317\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "df = pd.read_csv('C:\\\\Users\\\\Desktop\\\\Downloads\\\\New folder\\\\dataset-sell4all.csv')\n",
    "\n",
    "age_median = df['Age'].median()\n",
    "age_mean = df['Age'].mean()\n",
    "\n",
    "spendings_median = df['Customer spendings'].median()\n",
    "spendings_mean = df['Customer spendings'].mean()\n",
    "\n",
    "print(\"Médiane de l'âge : \", age_median)\n",
    "print(\"Moyenne de l'âge : \", age_mean)\n",
    "print(\"Médiane des dépenses des clients : \", spendings_median)\n",
    "print(\"Moyenne des dépenses des clients : \", spendings_mean)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Médiane d'âge par pays : \n",
      "Country\n",
      "Australia             44.0\n",
      "Austria               43.0\n",
      "Belgium               39.0\n",
      "Brazil                49.5\n",
      "Canada                46.0\n",
      "Chile                 46.0\n",
      "China                 35.0\n",
      "Colombia              29.0\n",
      "Costa Rica            48.0\n",
      "France                56.5\n",
      "Germany               53.0\n",
      "India                 45.5\n",
      "Indonesia             41.5\n",
      "Ireland               49.0\n",
      "Italy                 41.0\n",
      "Mexico                47.0\n",
      "Netherlands           48.0\n",
      "New Zealand           38.0\n",
      "Nigeria               37.0\n",
      "Norway                54.0\n",
      "Pakistan              44.0\n",
      "Peru                  38.0\n",
      "Philippines           51.0\n",
      "Poland                49.5\n",
      "Russian Federation    48.0\n",
      "Singapore             41.5\n",
      "South Africa          43.0\n",
      "South Korea           49.5\n",
      "Spain                 54.5\n",
      "Sweden                40.0\n",
      "Turkey                60.0\n",
      "Ukraine               46.0\n",
      "United Kingdom        48.5\n",
      "United States         48.5\n",
      "Vietnam               48.0\n",
      "Name: Age, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "df = pd.read_csv('C:\\\\Users\\\\Desktop\\\\Downloads\\\\New folder\\\\dataset-sell4all.csv')\n",
    "\n",
    "age_median_by_country = df.groupby('Country')['Age'].median()\n",
    "\n",
    "print(\"Médiane d'âge par pays : \")\n",
    "print(age_median_by_country)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "df = pd.read_csv('C:\\\\Users\\\\Desktop\\\\Downloads\\\\New folder\\\\dataset-sell4all.csv')\n",
    "\n",
    "spending_by_country = df.groupby('Country')['Customer spendings'].sum()\n",
    "spending_by_country.plot(kind='bar')\n",
    "plt.title('Dépenses des clients par pays')\n",
    "plt.ylabel('Dépenses (en dollars)')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: pandas in c:\\users\\desktop\\anaconda3\\lib\\site-packages (0.25.1)\n",
      "Requirement already satisfied: pytz>=2017.2 in c:\\users\\desktop\\anaconda3\\lib\\site-packages (from pandas) (2019.3)\n",
      "Requirement already satisfied: python-dateutil>=2.6.1 in c:\\users\\desktop\\anaconda3\\lib\\site-packages (from pandas) (2.8.0)\n",
      "Requirement already satisfied: numpy>=1.13.3 in c:\\users\\desktop\\anaconda3\\lib\\site-packages (from pandas) (1.16.5)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\desktop\\anaconda3\\lib\\site-packages (from python-dateutil>=2.6.1->pandas) (1.12.0)\n",
      "Requirement already satisfied: matplotlib in c:\\users\\desktop\\anaconda3\\lib\\site-packages (3.1.1)\n",
      "Requirement already satisfied: cycler>=0.10 in c:\\users\\desktop\\anaconda3\\lib\\site-packages (from matplotlib) (0.10.0)\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in c:\\users\\desktop\\anaconda3\\lib\\site-packages (from matplotlib) (1.1.0)\n",
      "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in c:\\users\\desktop\\anaconda3\\lib\\site-packages (from matplotlib) (2.4.2)\n",
      "Requirement already satisfied: python-dateutil>=2.1 in c:\\users\\desktop\\anaconda3\\lib\\site-packages (from matplotlib) (2.8.0)\n",
      "Requirement already satisfied: numpy>=1.11 in c:\\users\\desktop\\anaconda3\\lib\\site-packages (from matplotlib) (1.16.5)\n",
      "Requirement already satisfied: six in c:\\users\\desktop\\anaconda3\\lib\\site-packages (from cycler>=0.10->matplotlib) (1.12.0)\n",
      "Requirement already satisfied: setuptools in c:\\users\\desktop\\anaconda3\\lib\\site-packages (from kiwisolver>=1.0.1->matplotlib) (41.4.0)\n"
     ]
    }
   ],
   "source": [
    "!pip install pandas\n",
    "!pip install matplotlib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              Name    Phone Number                            Email  \\\n",
      "0       Aaron Cote        966-7625                 elit@hotmail.org   \n",
      "1  Angelica Lawson        232-3051            diam.proin@google.org   \n",
      "2    Louis Gilbert  1-997-733-0134      lorem.fringilla@hotmail.org   \n",
      "3     Basia Finley  1-987-322-7148      tristique.aliquet@icloud.co   \n",
      "4      Rhona Sears        387-7682  iaculis.odio.nam@protonmail.org   \n",
      "\n",
      "                  Address       Country Postal code Last date of connection  \\\n",
      "0   699-5837 Risus Street        Norway        4126                5-Apr-21   \n",
      "1  481-8428 Magna. Street      Pakistan      518885           oct. 10, 2021   \n",
      "2  Ap #192-2082 Enim. Ave      Colombia      575444                2-Jul-22   \n",
      "3        608-2732 Nec Rd.  South Africa   5973-5765               19-Feb-22   \n",
      "4             8763 In Rd.        France       37476               31-Mar-22   \n",
      "\n",
      "  Last time of connection  Age Gender  Customer spendings  \n",
      "0                    4:39   71    Man                 356  \n",
      "1                    0:36   37  Women                 173  \n",
      "2                    3:37   24  Women                 105  \n",
      "3                    2:34   37  Women                  28  \n",
      "4                    6:28   42  Women                  13  \n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "df = pd.read_csv(\"C:\\\\Users\\\\Desktop\\\\Downloads\\\\New folder\\\\dataset-sell4all.csv\")\n",
    "df = df[df['Customer spendings'] >= 10]\n",
    "print(df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "df = pd.read_csv(\"C:\\\\Users\\\\Desktop\\\\Downloads\\\\New folder\\\\dataset-sell4all.csv\")\n",
    "df.drop_duplicates(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Nombre de lignes après suppression des doublons : 500\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "df = pd.read_csv(\"C:\\\\Users\\\\Desktop\\\\Downloads\\\\New folder\\\\dataset-sell4all.csv\")\n",
    "df.drop_duplicates(inplace=True)\n",
    "print(\"Nombre de lignes après suppression des doublons :\", len(df))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "df = pd.read_csv(\"C:\\\\Users\\\\Desktop\\\\Downloads\\\\New folder\\\\dataset-sell4all.csv\")\n",
    "df.drop_duplicates(inplace=True)\n",
    "df = df[df[\"Customer spendings\"] >= 10]\n",
    "df = df[[\"Country\", \"Age\", \"Gender\", \"Customer spendings\"]]\n",
    "df.to_csv(\"clean_sell4all.csv\", index=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Opening file: C:\\Users\\Desktop\\Contacts\\clean_sell4all.csv\n",
      "Country,Age,Gender,Customer spendings\n",
      "Norway,71,Man,356\n",
      "Pakistan,37,Women,173\n",
      "Colombia,24,Women,105\n",
      "South Africa,37,Women,28\n",
      "France,42,Women,13\n",
      "Belgium,40,Women,380\n",
      "Belgium,47,Man,79\n",
      "Canada,46,Women,336\n",
      "Indonesia,58,Man,401\n",
      "Indonesia,41,Man,438\n",
      "South Africa,30,Man,59\n",
      "Brazil,27,Women,586\n",
      "Italy,63,Man,491\n",
      "Australia,28,Women,141\n",
      "Turkey,68,Women,524\n",
      "Nigeria,74,Man,258\n",
      "France,47,Man,477\n",
      "Pakistan,51,Man,585\n",
      "Germany,57,Women,32\n",
      "United States,60,Man,379\n",
      "Mexico,25,Man,82\n",
      "Netherlands,52,Women,30\n",
      "Norway,44,Women,125\n",
      "Poland,24,Women,349\n",
      "Vietnam,57,Man,317\n",
      "Costa Rica,27,Women,434\n",
      "Peru,29,Women,446\n",
      "China,53,Women,261\n",
      "India,41,Man,590\n",
      "Ireland,64,Man,141\n",
      "Austria,47,Man,453\n",
      "New Zealand,60,Man,184\n",
      "Costa Rica,67,Man,538\n",
      "Ireland,64,Man,193\n",
      "Philippines,25,Man,483\n",
      "Turkey,24,Women,104\n",
      "China,37,Women,504\n",
      "Brazil,56,Man,107\n",
      "China,24,Women,353\n",
      "Canada,35,Women,71\n",
      "South Korea,73,Women,264\n",
      "China,35,Man,149\n",
      "Germany,26,Man,536\n",
      "France,66,Women,240\n",
      "Mexico,49,Women,550\n",
      "Belgium,46,Women,61\n",
      "Pakistan,44,Man,288\n",
      "Mexico,58,Man,186\n",
      "Germany,52,Women,17\n",
      "United States,59,Women,349\n",
      "Costa Rica,68,Women,18\n",
      "Russian Federation,74,Women,521\n",
      "Sweden,38,Man,196\n",
      "France,69,Women,522\n",
      "Australia,46,Women,85\n",
      "Poland,47,Man,95\n",
      "Netherlands,20,Women,261\n",
      "Ukraine,50,Man,588\n",
      "Singapore,60,Man,455\n",
      "Mexico,32,Man,427\n",
      "Spain,72,Man,247\n",
      "Ireland,67,Man,247\n",
      "Indonesia,29,Man,563\n",
      "Belgium,37,Women,199\n",
      "Mexico,49,Women,389\n",
      "Philippines,67,Women,256\n",
      "New Zealand,22,Women,598\n",
      "Germany,29,Women,146\n",
      "New Zealand,68,Women,409\n",
      "Germany,36,Women,295\n",
      "Peru,25,Women,243\n",
      "Turkey,41,Women,518\n",
      "Norway,60,Man,150\n",
      "India,34,Women,476\n",
      "Colombia,66,Women,302\n",
      "South Africa,33,Women,477\n",
      "India,71,Man,147\n",
      "South Africa,56,Women,452\n",
      "Colombia,47,Man,118\n",
      "Russian Federation,48,Women,570\n",
      "Turkey,74,Women,259\n",
      "Russian Federation,24,Women,231\n",
      "Chile,60,Man,197\n",
      "Sweden,41,Women,311\n",
      "Italy,29,Women,226\n",
      "Chile,38,Man,279\n",
      "Belgium,37,Man,67\n",
      "Turkey,67,Women,194\n",
      "Belgium,73,Women,311\n",
      "Austria,45,Man,375\n",
      "Ukraine,19,Man,242\n",
      "Canada,25,Women,418\n",
      "Canada,64,Man,408\n",
      "China,40,Women,515\n",
      "Peru,28,Women,371\n",
      "New Zealand,69,Women,529\n",
      "South Korea,22,Man,419\n",
      "Pakistan,51,Man,532\n",
      "Sweden,27,Women,273\n",
      "Australia,29,Man,169\n",
      "Sweden,52,Man,552\n",
      "Singapore,71,Women,12\n",
      "South Africa,19,Man,382\n",
      "Ireland,49,Man,153\n",
      "New Zealand,34,Man,79\n",
      "Singapore,40,Women,426\n",
      "Indonesia,35,Man,455\n",
      "South Korea,59,Women,76\n",
      "Peru,69,Women,262\n",
      "Sweden,27,Women,276\n",
      "India,26,Man,275\n",
      "Australia,19,Women,192\n",
      "India,36,Women,378\n",
      "Pakistan,53,Man,271\n",
      "Philippines,60,Women,143\n",
      "Turkey,73,Women,588\n",
      "New Zealand,38,Women,343\n",
      "Ukraine,40,Women,484\n",
      "Nigeria,37,Man,510\n",
      "Belgium,34,Man,117\n",
      "Philippines,52,Women,558\n",
      "Ireland,18,Man,457\n",
      "Ukraine,26,Women,28\n",
      "Pakistan,41,Women,41\n",
      "Ukraine,28,Women,549\n",
      "Philippines,31,Women,184\n",
      "China,31,Man,303\n",
      "Netherlands,38,Man,490\n",
      "Sweden,71,Women,254\n",
      "Australia,44,Man,38\n",
      "Chile,25,Man,553\n",
      "Italy,38,Man,362\n",
      "Spain,47,Women,518\n",
      "Australia,38,Women,196\n",
      "Turkey,60,Man,594\n",
      "Australia,29,Man,97\n",
      "Netherlands,46,Women,223\n",
      "Mexico,30,Women,449\n",
      "Colombia,68,Women,272\n",
      "Peru,32,Man,280\n",
      "Russian Federation,46,Women,296\n",
      "Italy,36,Man,234\n",
      "Ukraine,33,Man,295\n",
      "United States,20,Man,499\n",
      "Colombia,19,Man,128\n",
      "Spain,70,Women,328\n",
      "Netherlands,28,Man,432\n",
      "Vietnam,56,Man,467\n",
      "Brazil,25,Man,335\n",
      "France,45,Man,300\n",
      "Austria,63,Women,241\n",
      "Ukraine,53,Man,25\n",
      "Vietnam,48,Man,226\n",
      "Ukraine,36,Women,418\n",
      "Philippines,51,Man,592\n",
      "Indonesia,55,Man,263\n",
      "Netherlands,24,Women,188\n",
      "United States,40,Man,531\n",
      "Vietnam,40,Man,11\n",
      "Austria,41,Man,22\n",
      "Australia,57,Women,328\n",
      "Brazil,21,Women,38\n",
      "Russian Federation,29,Man,433\n",
      "United States,51,Women,496\n",
      "Russian Federation,58,Women,264\n",
      "Netherlands,50,Man,421\n",
      "Turkey,63,Man,279\n",
      "Indonesia,34,Man,464\n",
      "Germany,40,Man,524\n",
      "Poland,55,Man,549\n",
      "Russian Federation,65,Women,207\n",
      "New Zealand,20,Women,158\n",
      "China,29,Women,196\n",
      "Colombia,34,Women,584\n",
      "Chile,45,Women,339\n",
      "China,18,Women,153\n",
      "Germany,69,Women,353\n",
      "Germany,54,Women,466\n",
      "New Zealand,23,Women,276\n",
      "Austria,50,Women,194\n",
      "Poland,58,Man,361\n",
      "Brazil,48,Women,66\n",
      "France,34,Women,525\n",
      "China,18,Women,413\n",
      "Austria,27,Women,558\n",
      "Mexico,45,Women,507\n",
      "China,49,Women,130\n",
      "Norway,65,Women,148\n",
      "Chile,42,Man,177\n",
      "Colombia,22,Man,487\n",
      "Sweden,68,Women,256\n",
      "Ireland,69,Man,466\n",
      "Vietnam,39,Women,261\n",
      "Chile,65,Women,267\n",
      "Netherlands,53,Women,454\n",
      "Nigeria,37,Women,411\n",
      "Colombia,18,Man,195\n",
      "Vietnam,48,Man,61\n",
      "Austria,19,Man,122\n",
      "Netherlands,19,Women,530\n",
      "Netherlands,41,Women,554\n",
      "Ireland,35,Man,591\n",
      "Pakistan,22,Man,254\n",
      "France,67,Women,463\n",
      "Mexico,68,Man,276\n",
      "Italy,23,Women,124\n",
      "Peru,24,Women,71\n",
      "Indonesia,23,Man,333\n",
      "Spain,71,Man,57\n",
      "Peru,62,Man,489\n",
      "South Korea,71,Women,149\n",
      "Turkey,59,Man,579\n",
      "Norway,43,Women,15\n",
      "Brazil,24,Women,73\n",
      "Chile,65,Women,448\n",
      "Mexico,41,Man,501\n",
      "Colombia,24,Man,155\n",
      "Ukraine,44,Women,538\n",
      "South Korea,34,Women,540\n",
      "Ireland,20,Man,12\n",
      "Belgium,21,Women,40\n",
      "India,42,Women,49\n",
      "Brazil,74,Man,593\n",
      "Indonesia,49,Man,339\n",
      "Ukraine,67,Man,128\n",
      "Germany,61,Women,221\n",
      "Australia,55,Man,437\n",
      "Austria,69,Women,530\n",
      "Spain,73,Women,528\n",
      "Italy,35,Women,72\n",
      "Spain,30,Women,122\n",
      "Pakistan,67,Women,96\n",
      "Peru,28,Women,500\n",
      "South Korea,66,Man,513\n",
      "Pakistan,65,Women,573\n",
      "Germany,56,Man,303\n",
      "Vietnam,25,Women,565\n",
      "Sweden,73,Man,184\n",
      "China,52,Man,109\n",
      "South Africa,33,Women,160\n",
      "Vietnam,58,Man,448\n",
      "Colombia,37,Women,373\n",
      "Belgium,39,Women,153\n",
      "Russian Federation,38,Women,577\n",
      "Ireland,71,Women,311\n",
      "Italy,66,Women,152\n",
      "Australia,66,Women,555\n",
      "Mexico,51,Man,572\n",
      "Peru,58,Women,357\n",
      "Sweden,19,Man,85\n",
      "Costa Rica,30,Man,79\n",
      "Philippines,74,Man,125\n",
      "Costa Rica,60,Women,596\n",
      "Vietnam,56,Women,128\n",
      "Netherlands,73,Man,78\n",
      "Costa Rica,55,Man,387\n",
      "New Zealand,25,Women,414\n",
      "Canada,44,Women,355\n",
      "New Zealand,58,Man,331\n",
      "United States,25,Women,265\n",
      "Australia,56,Women,189\n",
      "South Korea,33,Man,376\n",
      "Indonesia,23,Man,151\n",
      "Australia,38,Man,559\n",
      "Peru,68,Man,506\n",
      "Mexico,50,Women,318\n",
      "Peru,40,Man,541\n",
      "Ukraine,48,Women,267\n",
      "New Zealand,19,Women,199\n",
      "Poland,20,Women,184\n",
      "United States,67,Man,380\n",
      "Spain,51,Man,269\n",
      "United Kingdom,62,Man,207\n",
      "Belgium,50,Man,50\n",
      "South Africa,48,Man,253\n",
      "Nigeria,27,Women,57\n",
      "Italy,61,Man,34\n",
      "Peru,38,Women,508\n",
      "Ireland,49,Women,525\n",
      "Russian Federation,48,Man,317\n",
      "South Africa,43,Man,318\n",
      "United States,22,Man,545\n",
      "New Zealand,53,Women,360\n",
      "South Africa,47,Man,356\n",
      "France,74,Man,278\n",
      "Sweden,22,Women,296\n",
      "Costa Rica,23,Women,441\n",
      "Ireland,71,Man,292\n",
      "Poland,64,Man,491\n",
      "Mexico,29,Women,527\n",
      "Brazil,69,Women,486\n",
      "Netherlands,62,Man,574\n",
      "South Korea,47,Man,273\n",
      "South Korea,52,Women,318\n",
      "Vietnam,23,Man,478\n",
      "France,32,Women,150\n",
      "Pakistan,22,Man,565\n",
      "Ireland,33,Man,550\n",
      "Nigeria,64,Man,477\n",
      "Philippines,40,Women,323\n",
      "Mexico,68,Women,203\n",
      "Poland,23,Women,485\n",
      "South Africa,54,Man,527\n",
      "Chile,29,Man,501\n",
      "Canada,54,Women,57\n",
      "Norway,67,Women,455\n",
      "Austria,29,Man,421\n",
      "South Africa,24,Women,190\n",
      "Austria,28,Women,252\n",
      "Italy,45,Women,20\n",
      "Nigeria,21,Man,286\n",
      "South Korea,35,Women,285\n",
      "Netherlands,33,Women,433\n",
      "China,34,Women,494\n",
      "New Zealand,37,Women,508\n",
      "Indonesia,30,Women,420\n",
      "Austria,70,Women,373\n",
      "Canada,67,Man,540\n",
      "South Africa,57,Man,131\n",
      "Norway,35,Women,433\n",
      "France,62,Man,240\n",
      "Germany,21,Women,281\n",
      "Sweden,72,Man,244\n",
      "Brazil,44,Women,469\n",
      "Germany,62,Man,241\n",
      "Germany,51,Women,475\n",
      "Ireland,40,Women,67\n",
      "Germany,55,Women,221\n",
      "China,68,Man,297\n",
      "Germany,57,Women,310\n",
      "Italy,44,Man,346\n",
      "Colombia,42,Man,466\n",
      "United Kingdom,36,Women,276\n",
      "South Korea,21,Women,523\n",
      "United Kingdom,55,Women,111\n",
      "Pakistan,36,Women,156\n",
      "China,47,Man,157\n",
      "Chile,45,Man,89\n",
      "South Africa,50,Man,391\n",
      "Indonesia,29,Man,286\n",
      "Indonesia,59,Man,293\n",
      "Belgium,34,Women,92\n",
      "United States,50,Man,296\n",
      "Nigeria,43,Women,512\n",
      "Spain,29,Women,525\n",
      "Russian Federation,45,Man,376\n",
      "Italy,21,Man,500\n",
      "South Africa,55,Man,464\n",
      "India,59,Women,299\n",
      "Ukraine,72,Women,403\n",
      "India,49,Man,198\n",
      "France,45,Women,349\n",
      "Germany,38,Man,568\n",
      "Austria,67,Women,122\n",
      "Singapore,43,Women,14\n",
      "Spain,49,Women,594\n",
      "Vietnam,50,Women,578\n",
      "Russian Federation,65,Women,343\n",
      "New Zealand,19,Women,557\n",
      "Chile,59,Man,399\n",
      "United States,42,Women,36\n",
      "Belgium,74,Man,308\n",
      "United Kingdom,28,Man,274\n",
      "Indonesia,42,Women,472\n",
      "Singapore,72,Women,171\n",
      "Spain,52,Man,455\n",
      "Ukraine,46,Women,58\n",
      "Chile,47,Women,129\n",
      "Canada,46,Man,453\n",
      "United States,30,Man,576\n",
      "United Kingdom,62,Women,75\n",
      "United States,47,Man,310\n",
      "Sweden,40,Man,458\n",
      "Poland,66,Man,473\n",
      "Norway,36,Women,489\n",
      "France,72,Man,270\n",
      "Netherlands,40,Man,318\n",
      "China,69,Women,512\n",
      "India,69,Women,363\n",
      "Turkey,58,Man,160\n",
      "Chile,41,Man,318\n",
      "Australia,44,Women,506\n",
      "Costa Rica,44,Man,115\n",
      "Belgium,36,Man,74\n",
      "Mexico,37,Man,72\n",
      "Nigeria,24,Women,489\n",
      "Brazil,51,Women,581\n",
      "Mexico,62,Women,572\n",
      "Singapore,23,Man,447\n",
      "Netherlands,71,Man,592\n",
      "Nigeria,66,Man,324\n",
      "Brazil,51,Man,147\n",
      "Netherlands,51,Women,494\n",
      "New Zealand,39,Women,502\n",
      "Mexico,60,Man,338\n",
      "United States,23,Women,136\n",
      "Ukraine,32,Women,291\n",
      "Turkey,42,Women,292\n",
      "Italy,68,Man,181\n",
      "Chile,73,Man,398\n",
      "Philippines,57,Man,260\n",
      "Nigeria,28,Women,374\n",
      "Spain,57,Man,256\n",
      "Netherlands,55,Man,482\n",
      "India,61,Women,390\n",
      "United States,40,Women,331\n",
      "New Zealand,42,Man,236\n",
      "Austria,68,Women,567\n",
      "Indonesia,51,Man,14\n",
      "South Africa,65,Man,281\n",
      "Russian Federation,21,Women,243\n",
      "India,38,Man,522\n",
      "United Kingdom,53,Man,87\n",
      "Belgium,22,Women,568\n",
      "Philippines,54,Man,447\n",
      "Sweden,36,Women,35\n",
      "United Kingdom,44,Women,330\n",
      "France,56,Women,83\n",
      "United States,51,Man,142\n",
      "Ireland,36,Man,147\n",
      "France,57,Women,421\n",
      "Norway,52,Man,182\n",
      "Indonesia,70,Man,293\n",
      "Vietnam,23,Women,561\n",
      "South Africa,35,Women,456\n",
      "Philippines,53,Man,464\n",
      "Ireland,26,Women,243\n",
      "China,18,Man,341\n",
      "United States,54,Women,307\n",
      "Poland,30,Man,86\n",
      "Costa Rica,45,Women,146\n",
      "United States,71,Women,422\n",
      "New Zealand,52,Man,178\n",
      "Poland,52,Women,493\n",
      "United States,57,Women,293\n",
      "Ireland,34,Man,329\n",
      "Austria,27,Women,190\n",
      "Philippines,45,Man,378\n",
      "India,70,Women,260\n",
      "South Korea,61,Man,480\n",
      "Mexico,74,Man,408\n",
      "Netherlands,71,Women,377\n",
      "Philippines,49,Women,224\n",
      "France,72,Women,242\n",
      "India,37,Women,587\n",
      "United States,45,Man,209\n",
      "Philippines,41,Man,421\n",
      "Ukraine,74,Women,363\n",
      "Indonesia,70,Women,51\n",
      "Chile,62,Man,257\n",
      "Ireland,58,Man,221\n",
      "Norway,67,Man,450\n",
      "New Zealand,36,Man,485\n",
      "Colombia,51,Women,489\n",
      "Philippines,45,Man,143\n",
      "Mexico,45,Women,428\n",
      "United Kingdom,43,Man,201\n",
      "Colombia,21,Women,79\n",
      "Belgium,64,Women,307\n",
      "Spain,57,Women,266\n",
      "Ukraine,58,Man,464\n",
      "Norway,54,Women,343\n",
      "Costa Rica,51,Women,578\n",
      "Mexico,45,Man,537\n",
      "New Zealand,63,Women,50\n",
      "Singapore,36,Man,165\n",
      "Netherlands,44,Man,282\n",
      "Peru,24,Women,204\n",
      "Canada,21,Women,388\n",
      "Mexico,29,Man,431\n",
      "Ireland,73,Man,173\n",
      "United States,65,Women,143\n",
      "Vietnam,63,Women,334\n",
      "Brazil,54,Women,341\n",
      "Nigeria,38,Man,549\n",
      "Russian Federation,68,Women,138\n",
      "South Africa,33,Women,91\n",
      "Costa Rica,26,Women,398\n",
      "Brazil,65,Women,35\n",
      "Brazil,46,Women,256\n",
      "Costa Rica,59,Women,13\n",
      "Mexico,59,Man,549\n",
      "Mexico,23,Man,114\n",
      "Norway,29,Man,93\n",
      "China,49,Women,412\n",
      "Ireland,60,Women,166\n",
      "South Africa,72,Women,171\n",
      "Austria,27,Women,82\n",
      "Ukraine,67,Man,347\n",
      "Peru,68,Women,288\n",
      "Singapore,31,Man,379\n",
      "Pakistan,59,Man,372\n",
      "South Africa,28,Women,182\n",
      "France,46,Women,25\n",
      "Peru,43,Women,42\n",
      "China,20,Women,511\n",
      "United States,72,Women,518\n",
      "\n"
     ]
    }
   ],
   "source": [
    "file_path = 'C:\\\\Users\\\\Desktop\\\\Contacts\\\\clean_sell4all.csv'\n",
    "print(f\"Opening file: {file_path}\")\n",
    "with open(file_path, 'r') as file:\n",
    "    contents = file.read()\n",
    "print(contents)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
